datasource db {
  provider = "postgresql"
  url      = env("POSTG_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
//   previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organization   String?       @db.VarChar(255)
  description   String?       @db.VarChar(1000)
  isRegistered   Boolean?      @default(false)
  event_host     event_host[]
  event_guest   event_guest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




// from rajiv docs

// event_table schema
enum Type {
  zoom
  virtual
  in_person
}

model event_table {
  id                      Int             @id @default(autoincrement())
  cover_photo_link        String?         @db.VarChar(355)
  title                   String          @db.VarChar(255)
  type                    Type
  description             String          @db.VarChar(1000)
  bounty                  String?         @db.Text
  registration_start_date DateTime?       @db.Date
  registration_end_date   DateTime?       @db.Date
  open_for_registration   Boolean?
  zoom_link               String?         @db.VarChar(255)
  virtual_url             String?         @db.VarChar(255)
  location                String?         @db.VarChar(255)
  capacity                Int?
  isPublished             Boolean?
  event_host              event_host[]
  event_details           event_details[]
  event_guest             event_guest[]
}

// event_details schema 
model event_details {
  event_table event_table @relation(fields: [event_id], references: [id])
  event_id    Int
  date        DateTime    @db.Date
  start_time  DateTime    @db.Time()
  end_time    DateTime    @db.Time()

  @@id([event_id, date, start_time, end_time])
}

// event_host schema
enum host_access {
  manager
  host
  admin
}

enum host_status {
  accepted
  invited
  declined
  invoked
}

model event_host {
  event_table event_table @relation(fields: [event_id], references: [id])
  event_id    Int

  user      User @relation(fields: [host_id], references: [id])
  host_id String

  host_access host_access? @default(host)
  status      host_status? @default(invited)

  @@id([event_id, host_id])
}

// event_guest schema
enum guest_status {
  invited
  accepted
  declined
  expired
  revoked
}

model event_guest {
  event_table event_table @relation(fields: [event_id], references: [id])
  event_id    Int

  user     User @relation(fields: [guest_id], references: [id])
  guest_id String

  status   guest_status? @default(invited)
  attented Boolean?      @default(false)
  passkey  Int?

  @@id([event_id, guest_id])
}